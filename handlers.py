from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from urllib.parse import urlparse
import os
import logging
import asyncio
import tempfile
import aiofiles
import aiohttp
import yt_dlp

MAX_FILE_SIZE=50 * 1024 * 1024

router = Router()

logger = logging.getLogger(__name__)

class VideoDownloader:
    def __init__(self):
        self.ydl_opts = {
            'format': 'best[filesize<50M]/best',
            'outtmpl': '%(title)s.%(ext)s',
            'quiet': True,
            'no_warnings': True,
        }
        
    async def download_video(self, url: str, output_path: str):
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤—ã–≤–æ–¥–∞
            self.ydl_opts['outtmpl'] = os.path.join(output_path, '%(title)s.%(ext)s')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            loop = asyncio.get_event_loop()
            
            def download_sync():
                with yt_dlp.YoutubeDL(self.ydl_opts) as ydl:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                    info = ydl.extract_info(url, download=False)
                    title = info.get('title', 'video')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    filesize = info.get('filesize') or info.get('filesize_approx', 0)
                    if filesize > MAX_FILE_SIZE:
                        return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({filesize / 1024 / 1024:.1f} MB). –ú–∞–∫—Å–∏–º—É–º 50MB."
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    ydl.download([url])
                    return title, None
            
            result = await loop.run_in_executor(None, download_sync)
            
            if result[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
                return None, result[1]
            
            title = result[0]
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            for file in os.listdir(output_path):
                if file.endswith(('.mp4', '.avi', '.mkv', '.webm', '.mov', '.flv')):
                    return os.path.join(output_path, file), title
            
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ yt-dlp: {e}")
            return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}"

    async def download_direct_video(self, url: str, output_path: str):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ"""
        try:
            timeout = aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        return None, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (–∫–æ–¥: {response.status})"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    content_length = response.headers.get('content-length')
                    if content_length and int(content_length) > MAX_FILE_SIZE:
                        return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({int(content_length) / 1024 / 1024:.1f} MB)"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                    filename = os.path.basename(urlparse(url).path)
                    if not filename or '.' not in filename:
                        filename = "video.mp4"
                    
                    filepath = os.path.join(output_path, filename)
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                    total_size = 0
                    async with aiofiles.open(filepath, 'wb') as f:
                        async for chunk in response.content.iter_chunked(8192):
                            await f.write(chunk)
                            total_size += len(chunk)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            if total_size > MAX_FILE_SIZE:
                                await f.close()
                                os.remove(filepath)
                                return None, f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({total_size / 1024 / 1024:.1f} MB)"
                    
                    return filepath, filename
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
            return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}"

downloader = VideoDownloader()

@router.message(Command("start"))
async def start_handler(msg: Message):
    welcome_message = """
üé¨ <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.</b>

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è!

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b>
‚Ä¢ YouTube, YouTube Shorts
‚Ä¢ TikTok
‚Ä¢ Instagram (–ø–æ—Å—Ç—ã –∏ reels)
‚Ä¢ Twitter/X
‚Ä¢ VK Video
‚Ä¢ Rutube
‚Ä¢ –ò –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
‚Ä¢ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
üìÅ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB 
‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
2. –ñ–¥–∏, –ø–æ–∫–∞ —è –µ–≥–æ —Å–∫–∞—á–∞—é
3. –ü–æ–ª—É—á–∏ –≤–∏–¥–µ–æ –≤ —á–∞—Ç–µ!

üöÄ <i>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –∏ –∂–¥–∏!</i>
    """
    await msg.answer(welcome_message, parse='HTML')

@dp.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:</b>
1. –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
2. –û—Ç–ø—Ä–∞–≤—å –µ—ë –±–æ—Ç—É
3. –ñ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>
üìπ MP4, AVI, MKV, WebM, MOV, FLV

<b>–ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—á–∞—è
‚Ä¢ –£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å. 50MB)
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É

<b>–ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫:</b>
‚Ä¢ https://youtube.com/watch?v=...
‚Ä¢ https://youtu.be/...
‚Ä¢ https://tiktok.com/@user/video/...
‚Ä¢ https://instagram.com/p/...
‚Ä¢ https://twitter.com/user/status/...

‚ùì <i>–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</i>
    """
    await message.answer(help_text, parse_mode='HTML')

async def is_valid_url(url) -> bool:
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except Exception:
        return False

@router.message(F.text)
async def text_handler(msg: Message):
    text = msg.text.strip()
    
    if not is_valid_url(text):
        await msg.reply(
            "ü§î <b>–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É.</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.\n\n"
            "–ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=...",
            parse_mode='HTML'
        )
        return
    
    status_message = await msg.reply("‚è≥ <b>–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...</b>", parse_mode='HTML')

    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            await status_message.edit_text("üì• <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...</b>", parse_mode='HTML')
            filepath, title = await downloader.download_video(text, temp_dir)

            if not filepath:
                await status_message.edit_text("üì• <b>–ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...</b>", parse_mode='HTML')
                filepath, title = await downloader.download_direct_video(text, temp_dir)

            if not filepath:
                await status_message.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {title}", parse_mode='HTML')
                return

            if not os.path.exists(filepath):
                await status_message.edit_text("‚ùå <b>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</b>", parse_mode='HTML')
                return

            file_size = os.path.getsize(filepath)
            if file_size > MAX_FILE_SIZE:
                await status_message.edit_text(
                    f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n"
                    f"–†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB\n"
                    f"–ú–∞–∫—Å–∏–º—É–º: 50 MB",
                    parse_mode='HTML'
                )
                return

            await status_message.edit_text("üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...</b>", parse_mode='HTML')

            video_file = FSInputFile(filepath)

            caption = f"üé¨ <b>{title}</b>\nüìä –†–∞–∑–º–µ—Ä: {file_size / 1024 / 1024:.1f} MB"

            await msg.answer_video(
                video = video_file,
                caption = caption,
                parse_mode = 'HTML',
                supports_streaming = True,
            )

            await status_message.delete()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await status_message.edit_text(
                f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n<code>{str(e)}</code>",
                parse_mode='HTML'
            )
